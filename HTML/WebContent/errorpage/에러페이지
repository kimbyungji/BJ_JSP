## 예외페이지
 - 예외 상황이 발생했을 경우 웹 컨테이너(톰캣)에서 제공되는 기본적인 예외페이지를 보여줌
 - 개발 과정에서 이러한 예외 페이지를 보고 어떤 에러가 발생했는지 알 수 있기 때문에 오류 수정하는데 도움이 된다.
 - 하지만, 상용 서비스를 제공하고 있는 중에 이런 에러페이지는 사용자에게 불편함을 줄 수 있고, 신뢰도를 떨어뜨릴 수 있음
 - 또한 코드의 일부가 노출되어 보안 측면에서도 좋지 않은 상황
 - 이런 이유로 개발자가 따로 만들어 놓은 "에러 페이지로 유도"하여 사용자에게 친숙한 페이지를 노출하는 처리
 
## HTTP 주요 응답 상태 코드
 1. 200 : 요청을 성공적으로 처리함(200번대 응답 성공)
 2. 307 : 임시로 페이지를 리다이렉트(300번대 리다이렉트 코드)
 3. 400 : 클라이언트 요청이 잘못된 구문으로 작성됨(400번대 클라이언트 에러 코드)
 4. 403 : 권한이 없는 경우
 5. 404 : 요청한 URL을 찾을 수 없는 경우
 6. 405 : 요청 방식을 허용하지 않음(GET, POST방식)
 7. 500 : 내부 서버 에러(500번대 서버 에러 코드)
 8. 503 : 서버가 일시적으로 서비스를 제공할 수 없는 상태(일시적 서버 과부하, 서버 임시 보수 등)
 
## 예외처리 방법1
 [직접 예외를 처리하기]
  - java의 try ~~ catch ~~ 구문을 사용하여 개발자가 직접 예외처리함
  
  <body>
  	ID : 
  	<%try {%>
  		<%= request.getParameter("num").trim() %>
  		
  	<%} catch{Exception e} %>
  			ID 값이 없습니다.
  			<%}%>
  </body>
  
## 예외처리 방법2
 [에러를 처리할 페이지를 따로 지정하기]
  - JSP는 실행 도중 예외가 발생할 때 톰캣 기본 에러화면 대신 개발자가 지정한 JSP페이지를 보여줄 수 있음
  - 에러가 발생하면 보여줄 JSP페이지는 페이지 지시자(directive)의 errorPage속성을 사용하여 지정
  - 예외가 발생할 것으로 예상되는 페이지에 예외가 발생했을 때 보여줄 페이지를 지정
  <%@ page errorPage="에러 발생시 보여줄 페이지.jsp" %>
  - 에러 발생시 유도된 페이지는 페이지 지시자를 태그로 사용하여 isErrorPage속성을 사용하여 "true"로 값을 설정
  <%@ page isErrorPage="true" %>
  
## 예외처리 방법3
 [응답 상태 코드별 에러 페이지 지정하기]
  - JSP는 에러 코드별로 사용할 에러 페이지를 web.xml파일 수정을 통해서 지정할 수 있음
  - 이 경우에 지정한 에러페이지는 일반 JSP파일과 동일하게 작성

예)  
[web.xml]
 <error-page>
 	<error-code></error-code>
 	<location>/errorpage/error_404.jsp</location>
 </error-page>
 
  <error-page>
 	<error-code></error-code>
 	<location>/errorpage/error_500.jsp</location>
 </error-page>
 
  <error-page>
 	<exception-type>java.lang.NullPointerException</exception-type>
 	<location>/errorpage/error_null.jsp</location>
 </error-page>
 
 [에러 페이지 우선순위]
 - 에러 페이지를 여러 방법으로 지정한 경우 다음의 우선순위에 따라 사용할에러 페이지를 선택합니다.
 1. 페이지 지시자 태그의 errorPage속성에 지정한 페이지
 2. web.xml에 지정한 에러 타입에 따른 페이지
 3. web.xml에 지정한 응답 상태 코드에 따른 페이지
 4. 위 항목에 해당하지 않은 경우에 톰켓에서 제공하는 에러 페이지