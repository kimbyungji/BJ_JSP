#### JSP 내장객체
 : 개발자가 JSP파일 내에 객체를 생성하지 않고, 바로 사용할 수 있는 객체를 "내장객체"라고 한다.
 JSP에서 제공되는 내장객체는 JSP Container에 의해 Servlet 변환될 때 자동으로 객체가 생성된다.
 
## JSP 내장 객체 종류
 1. request( javax.servlet.http.HttpServletRequest )
 2. response( javax.servlet.http.HttpServletResponse )
 3. out( javax.servlet.jsp.jspWriter )
 4. session( javax.servlet.http.HttpSession )
 5. application( javax.servlet.ServletContext )
 6. pageContext ( javax.servlet.jsp.PageContext )
 7. page( javax.servlet.jsp.HttpJspPage )
 8. config( javax.servlet.ServletConfig )
 9. exception(java.lang.Throwable )
 
# 1. Request
 - 웹 브라우저를 통해서 서버에 어떤 정보를 요청하는 것을 Request라고 합니다.
 - 이때 요청 정보가 담기고 관리되는 곳이 request 객체입니다.
 
 [제공기능]
  1) 클라이언트 (웹브라우저)와 관련된 정보 읽기
  2) 서버와 관련된 정보 읽기 기능
  3) 클라이언트가 전송한 요청 파라미터 읽기 기능
  4) 클라이언트가 전송한 쿠키 읽기 기능
  
 [request 객체의 주요 메서드]
 1. getContextPath() | 반환타입 : String -> 웹 어플리케이션의 컨텍스트 루트의 경로를 얻을 수 있음
 2. getNethod() | 반환타입 : String -> 브라우저가 정보를 전송할 때 사용한 요청 방식을 얻은(GET,POST)
 3. getServerName() | 반환타입 : String -> 연결할 때 사용한 서버 이름을 전달함
 4. getServerPort()| 반환타입 : int -> 서버가 실행 중인 포트 번호를 얻는다
 5.getRequestURL() | 반환타입 : StringBuffer -> 요청 URL을 얻는다
 6. getRequestURI() | 반환타입 : String -> 요청 URI를 얻는다.
 7. getRemoteAddr() | 반환타입 : String -> 웹 서버에 연결한 클라이언트 IP주소를 얻는다
 8. getProtocol() | 반환타입 : String -> 해당 프로토콜을 얻는다
 9. getParameter(name) | 반환타입 : String -> 이름이 name인 파라미터 값을 얻는다. 존재하지 않는 경우 null을 반환
 10. getParameterValues(name) | 반환타입 : String[] -> 이름이 name인 모든 파라미터 값들을 배열로 얻는다. 존재하지 않는 경우 null을 반환

 
# 2. Response 객체
 - 웹 브라우저의 요청에 응답하는 것을 response라고 하고, 응답 정보를 가지고 있는 객체를 의미함
  
  [response 관련 메서드]
  1. getCharaterEncoding() | 응답할 때 문자 인코딩 형태를 얻어옴
  2. addCookie() | 쿠키를 저장함
  3. sendRedirect(URL) | 지정한 URL로 이동함
  
# 3. out 객체
 - JSP페이지가 생성하는 모든 내용은 out 기본 객체를 통해서 전송됨
 - JSP페이지 내에서 사용하는 비스크립트 요소들(HTML코드와 텍스트)이 out객체에 전달됨
 - 값을 출력하는 표현식(expression)의 결과값도 out객체에 전달됨
 - 이런 이유로 표현식으로 대체
 
### 쿠키와 세션
 # 쿠키(Cookie)
 	- 웹 브라우저에서 서버로 어떤 데이터를 요청하면, 서버 측에서 알맞은 로직을 수행한 후에 웹 브라우저 응답
 	- HTTP 프로토콜은 응답 후 웹 브라우저와 관계를 종료(통신 세션 종료 - TCP 세션 종료)
 	- 연결이 끊어졌을 때(TCP세션 종료), 어떤 정보를 지속적으로 유지하기 위한 수단을 가지는 이것을 '쿠키'방식 사용
 	- 쿠키는 서버에서 생성, 서버가 아닌 클라이언트 측에 정보를 저장(저장 위치는 메모리 또는 저장장치(HDD))
 	- 서버에서, 클라이언트가 요청할 때 마다 쿠키의 속성값을 참조, 이 때 필요에 따라서 서버가 변경할 수 있음
 	- 쿠키는 개당 4kb의 용량으로 제한적으로 사용되며, 최대 300개(1.2MB)까지 정보를 가질 수 있음
 	
 	(동작)
 	1. 클라이언트가 서버에 요쳥(Request 요쳥)
 	 -> 쿠키 존재 여부 확인. 쿠키가 있으면 요쳥에 쿠키값을 포함. 쿠키가 없으면 그냥 요쳥 처리
 	 
 	2. 서버는 클라이언트의 요청을 처리
 	 -> 쿠키 존재 여부 확인. 쿠키가 있으면 쿠키 정보를 확인해서 요청 처리를 진행. 쿠키가 없으면 필요에 따라 쿠키를 생성해서 요청 처리를 진행
 	 
 	3. 클라이언트는 응답 정보를 확인 처리 
 	 -> 쿠키가 있으면 저장
 	
 	# 쿠키 사용시 연결 해제되는 경우
 	 - 기간 만료 시
 	 - 쿠키 폐기 시
 	 
 	 [쿠키 객체 관련 메서드]
 	 1. setMaxAge() : 쿠키의 유효시간을 설정
 	 2. setPath() : 쿠키 사용의 유효 디렉토리를 설정
 	 3. setValue() : 쿠키 값을 설정
 	 4. setVersion() : 쿠키 버전을 설정
 	 5. getMaxAge() : 쿠키 유효시간 정보 얻기
 	 6. getName() : 쿠키 이름을 얻기
 	 7. getPath() : 쿠키 사용의 유효 디렉터리 정보 얻기
 	 8. getValue() : 쿠키 값을 얻기
 	 9. getVersion() : 쿠키 버전 얻기
 	 
# 4. Session 객체
 - 세션도 쿠키와 같이 서버와의 관계를 유지하기 위한 수단
 - 단, 쿠키와 달리 클라이언트의 특정 위치에 저장되지 않는다. 서버 상에서 객체 형태로 존재
 - 서버당 하나의 세션 객체를 가질 수 있음(브라우저 별 서로 다른 세션을 사용)
 - 세션 객체는 브라우저 창을 종료하면 삭제
 - 따라서 세션은 서버에서만 접근이 가능하며, 보안이 좋고, 저장할 수 있는 데이터의 한계도 없음
 - 세션 클라이언트의 요청이 발생하면 자동 생성되고, 고유한 ID값을 클라이언트에게 넘겨주어 이것을 쿠키에 저장함
 - JSP에서 session이란 내장 객체를 지원하여 세션의 속성을 설정할 수 있음
 
 [세션 메서드 종류]
 1. setAttribute() : 세션에 데이터를 저장
 2. getAttribute() : 세션에 저장된 데이터를 얻음
 3. getAttributeNames() : 세션에 저장되어 있는 모든 데이터의 세션 이름(key)를 얻음
 4. getId() : 자동 생성된 세션의 유니크한 아이디를 얻음
 5. getCreationTime() : 세션이 생성된 시간을 구함
 6. getLastAccessedTime() : 웹 브라우저가 가장 마지막에 세션에 접근한 시간을 구함
 7. setMaxInactiveInterval() : 세션의 유효시간을 설정(단위 "초")
 8. getMaxInactiveInterval() : 세션의 유효시간을 얻음. 가장 최근 요청시점을 기준으로 카운트
 9. removeAttribute() : 특정 세션을 삭제
 10. invalidate() : 모든 세션을 삭제
 
 ## 쿠키와 세션
 - 쿠키 대신에 세션을 사용하는 이유는 "세션이 쿠키보다 보안에서 앞서기 때문에"
 - 쿠키의 이름이나 데이터는 네트워크를 통해서 전달되기 때문에 HTTP프로토콜을 사용하는 경우에는
 	중간에 값을 탈취당할 수 있다.(hTTPS를 사용하는 이유)
 - 하지만, 세션은 오직 서버에만 저장되기 때문에 중요한 정보를 저장하기 좋은 방식
 - 세션을 사용하는 다른 이유는 웹브라우저가 쿠키를 지원하지 않거나 강제로 사용자가 쿠키를 차단하는 경우에도 사용할 수 있음
 - 세션의 단점은 여러 서버에 "공유할 수 없다"는 것이나 쿠키는 도메인을 이용하여 여러 도메인에 "공유할 수 있다"
 
# 5. Application 기본 객체
 - 특정 웹 어플리케이션에 포함된 모든 JSP페이지는 하나의 application 기본 객체를 공유
 - application 객체는 웹 어플리케이션 전반에 걸쳐서 사용되는 정보를 담고 있는 객체
 
 [생명주기]
 Container에서 정보를 처리할 경우에 해당 정보를 유지하는 기간을 말함
 
 - request 객체는 요청 영역마다 생성되고, 해당 페이지에서 끝남
 - session 객체는 브라우저별로 생성되고, 브라우저 종료시 끝남
 - application 객체는 프로그램 전체에서 딱 한번 최초 가동시 생성